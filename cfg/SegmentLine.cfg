#!/usr/bin/env python
PACKAGE = 'docking'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("world_frame",    str_t,    0, "Name of world frame",  "world")
gen.add("robot_frame",    str_t,    0, "Name of robot frame",  "base_link")
gen.add("cloud_frame",    str_t,    0, "Name of cloud frame",  "cloud")
gen.add("cloud_topic",    str_t,    0, "Name of cloud frame",  "scanCloud")
gen.add("laser_frame",    str_t,    0, "Name of laser frame",  "laser")
gen.add("laser_topic",    str_t,    0, "Name of laser topic",  "scan")
gen.add("RS_max_iter",    int_t,    0, "RANSAC Maximum Iterations", 250,  0, 10000)
gen.add("RS_min_inliers",    int_t,    0, "RANSAC Maximum Iterations", 10,  0, 50)
gen.add("RS_dist_thresh", double_t, 0, "RANSAC Distance Threshold", .01, 0,   1)
gen.add("RANSAC_on_clusters",   bool_t,   0, "Perform RANSAC after Clustering Points",  True)
gen.add("Voxel_leaf_size", double_t, 0, "Leaf Size for Voxel Grid", .001, 0,   1)
gen.add("EC_cluster_tolerance", double_t, 0, "EuclideanCluster Tolerance (m)", .125, 0,   0.5)
gen.add("EC_min_size",    int_t,    0, "EuclideanCluster Min Cluster Size", 10,  0, 20)
gen.add("EC_max_size",    int_t,    0, "EuclideanCluster Max Cluster Size", 100,  0, 10000)


size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "docking", "SegmentLine"))
